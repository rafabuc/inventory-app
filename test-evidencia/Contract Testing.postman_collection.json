{
	"info": {
		"_postman_id": "5d0500a4-3b77-4a28-a6c3-589fa13b69c8",
		"name": "Contract Testing",
		"description": "# About this collection\n\nThis collection helps you set up contract tests to ensure that two separate systems are compatible and can communicate with one another.\n\n## **Using the collection**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n### Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)\n\n[  \n](https://postman.postman.co/documentation/24552533-5bead607-0197-4e1d-87d4-3160bc7631c1?entity=&branch=&version=)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4011924",
		"_collection_link": "https://lively-sunset-37883.postman.co/workspace/API-Inventory~86baf2ee-ab2b-4f85-815c-77b198532eff/collection/4011924-5d0500a4-3b77-4a28-a6c3-589fa13b69c8?action=share&source=collection_link&creator=4011924"
	},
	"item": [
		{
			"name": "Test Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validate that the response is json object",
							"pm.test(\"Response is a json object\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"// Validate that the response has an arg object",
							"pm.test(\"Response to have 'arg' object\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('args');",
							"});",
							"",
							"// Validate that the response has headers object",
							"pm.test(\"Response to have 'headers' object\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('headers');",
							"});",
							"",
							"// Validate that the response has url property",
							"pm.test(\"Response to have 'url' property\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('url');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "foo1",
							"value": "bar1"
						},
						{
							"key": "foo2",
							"value": "bar2"
						}
					]
				},
				"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
			},
			"response": []
		},
		{
			"name": "Delete Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Response Code should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Run validations on response headers like Content-Type\r",
							"pm.test(\"Content-Type should be JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const json = pm.response.json();\r",
							"\r",
							"// The response body, including individual attributes can be evaluated for correctness\r",
							"pm.test(\"`args` should contain the correct query params\", function () {\r",
							"    pm.expect(json.args).to.be.an('object');\r",
							"    pm.expect(json.args.foo).to.eql('bar');\r",
							"    pm.expect(json.args.baz).to.eql('value');\r",
							"});\r",
							"\r",
							"// Non-trivial data types like Dates can also be tested against\r",
							"pm.test(\"Date in the header should be valid\", function () {\r",
							"    const parsedDate = new Date(pm.response.headers.get('Date'));\r",
							"    pm.expect(parsedDate).to.be.a('date');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base-url}}/products/21",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"products",
						"21"
					]
				},
				"description": "The tests in the request validate the response code and the data returned in the response is the same as the one being sent."
			},
			"response": []
		},
		{
			"name": "Create Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"// Validate raw body sent in the request, be it form-data or JSON\r",
							"pm.test(\"`form` should contain the correct form data\", function () {\r",
							"    pm.expect(json.form).to.be.an('object');\r",
							"    pm.expect(json.form.foo1).to.eql('bar1');\r",
							"    pm.expect(json.form.foo2).to.eql('bar2');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\": \"product-testin1\",\r\n    \"name\":\"product-name-testing1\",\r\n    \"code\":\"code-testing1\",\r\n    \"weight\":\"weight-testing1\"\r\n}"
				},
				"url": {
					"raw": "{{base-url}}/products",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"products"
					]
				},
				"description": "The tests in this request validate that the request body sent as form-data is valid."
			},
			"response": []
		},
		{
			"name": "Get All Products",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base-url}}/products",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\": \"product-testing1-update\",\r\n    \"name\":\"product-name-testing1-update\",\r\n    \"code\":\"code-testing1-update\",\r\n    \"weight\":\"weight-testing1-update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/products/21",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"products",
						"21"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Inventory",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{inventory-url}}/inventory",
					"host": [
						"{{inventory-url}}"
					],
					"path": [
						"inventory"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Inventory By Product ID",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{inventory-url}}/inventory/products/2",
					"host": [
						"{{inventory-url}}"
					],
					"path": [
						"inventory",
						"products",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Inventory",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Update Inventory",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": 22,\r\n    \"stock\": 1,\r\n    \"name\":\"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{inventory-url}}/inventory/products/21",
					"host": [
						"{{inventory-url}}"
					],
					"path": [
						"inventory",
						"products",
						"21"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Inventory",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{inventory-url}}/inventory/products/1",
					"host": [
						"{{inventory-url}}"
					],
					"path": [
						"inventory",
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product By Id",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{product-url}}/products",
					"host": [
						"{{product-url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Message Product",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": 44,\r\n    \"name\":\"product-name-testing2w  uqye\",\r\n    \"stock\": 4\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{product-url}}/send",
					"host": [
						"{{product-url}}"
					],
					"path": [
						"send"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://postman-echo.com"
		}
	]
}